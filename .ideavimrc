set visualbell
set ideajoin
set idearefactormode=keep
set ideawrite=all
set showmode
set showcmd
set relativenumber
set number
set clipboard+=unnamedplus
set hlsearch
set incsearch
set scrolloff=5 " Keep X lines above/below cursor when scrolling
set iskeyword+=- " Treat dash separated words as a word text object


" Disable automatic comment insertion
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

let mapleader = " "

" Reloading IDEAVIM config
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

" Collapses
nnoremap [[ :action MethodUp<CR>zz
nnoremap ]] :action MethodDown<CR>zz
nnoremap zc :action CollapseRegion<CR>
nnoremap zo :action ExpandRegion<CR>
nnoremap <leader>zc :action CollapseAllRegions<CR>
nnoremap <leader>zo :action ExpandAllRegions<CR>

" Delete without yanking
nnoremap <space>d "_d
vnoremap <space>d "_d
nnoremap <space>D "_D
nnoremap <space>C "_C
nnoremap <space>c "_c
nnoremap <space>x "_x
" Replace currently selected text with default register without yanking
vnoremap p "_dP

nnoremap Y y$
nnoremap n nzzzv
nnoremap N Nzzzv

" D duplicates highlighted below
vnoremap D y'>p
vnoremap < <gv
vnoremap > >gv

" Splits
nmap <c-h> <Action>(PrevSplitter)
nmap <c-l> <Action>(NextSplitter)
nnoremap <leader>L :action SplitVertically<CR>
nnoremap <leader>J :action SplitHorizontally<CR>
nnoremap <leader>- :action Unsplit<CR>
nnoremap <c-m> :action MoveEditorToOppositeTabGroup<CR>

" Buffer navigation
nmap <tab> <Action>(NextTab)
nmap <s-tab> <Action>(PreviousTab)
nmap <space>fc :action HideAllWindows<CR>

" Diagnostics navigation
nmap <space>e <Action>(ShowErrorDescription)
nmap ge <Action>(GotoPreviousError)
nmap gE <Action>(GotoNextError)

" Code navigation
nmap <space>ff <Action>(GotoFile)
nmap <space>fg <Action>(FindInPath)
nmap <space>fb <Action>(RecentFiles)
nmap <space>fd <Action>(ActivateProblemsViewToolWindow)
nmap <space>fa <Action>(FindUsages)
nmap gd <Action>(GotoDeclaration)
nmap gD <Action>(GotoDeclaration)
nmap gt <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)

nmap gp :action RecentProjects<CR>

" Refactorings
nnoremap <space>r :action Refactorings.QuickListPopupAction<CR>
nmap <space>R <Action>(RenameElement)
nmap <space>ca <Action>(ShowIntentionActions)
nmap <space>fm <Action>(ShowReformatFileDialog)
vmap <space>fm <Action>(ShowReformatFileDialog)
nmap <F1> <Action>(ShowReformatFileDialog)

" Running files
nnoremap ,r :action ChooseRunConfiguration<CR>
nmap <space>tc :action RunCoverage<CR>
nmap <space>tC gg:action MethodDown<CR>zz:action RunCoverage<CR>
"
" Git blame
nmap <space>gb :action Annotate<CR>

"Random
nnoremap <F2> :set ignorecase! ignorecase?<cr>

" Plugins
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 70 " time in milliseconds
let g:highlightedyank_highlight_color = 'rgba(38, 139, 210, 100)'
"let g:highlightedyank_highlight_color = 'rgba(255, 187, 0, 100)'
"let g:highlightedyank_highlight_color = 'rgba(98, 114, 164, 100)'

Plug 'easymotion/vim-easymotion'
Plug 'dbakker/vim-paragraph-motion'
